#!/usr/bin/env python3
import sys, struct

NINTENDO_LOGO = bytes([
    0x24, 0xFF, 0xAE, 0x51, 0x69, 0x9A, 0xA2, 0x21, 0x3D, 0x84, 0x82, 0x0A,
    0x84, 0xE4, 0x09, 0xAD, 0x11, 0x24, 0x8B, 0x98, 0xC0, 0x81, 0x7F, 0x21,
    0xA3, 0x52, 0xBE, 0x19, 0x93, 0x09, 0xCE, 0x20, 0x10, 0x46, 0x4A, 0x4A,
    0xF8, 0x27, 0x31, 0xEC, 0x58, 0xC7, 0xE8, 0x33, 0x82, 0xE3, 0xCE, 0xBF,
    0x85, 0xF4, 0xDF, 0x94, 0xCE, 0x4B, 0x09, 0xC1, 0x94, 0x56, 0x8A, 0xC0,
    0x13, 0x72, 0xA7, 0xFC, 0x9F, 0x84, 0x4D, 0x73, 0xA3, 0xCA, 0x9A, 0x61,
    0x58, 0x97, 0xA3, 0x27, 0xFC, 0x03, 0x98, 0x76, 0x23, 0x1D, 0xC7, 0x61,
    0x03, 0x04, 0xAE, 0x56, 0xBF, 0x38, 0x84, 0x00, 0x40, 0xA7, 0x0E, 0xFD,
    0xFF, 0x52, 0xFE, 0x03, 0x6F, 0x95, 0x30, 0xF1, 0x97, 0xFB, 0xC0, 0x85,
    0x60, 0xD6, 0x80, 0x25, 0xA9, 0x63, 0xBE, 0x03, 0x01, 0x4E, 0x38, 0xE2,
    0xF9, 0xA2, 0x34, 0xFF, 0xBB, 0x3E, 0x03, 0x44, 0x78, 0x00, 0x90, 0xCB,
    0x88, 0x11, 0x3A, 0x94, 0x65, 0xC0, 0x7C, 0x63, 0x87, 0xF0, 0x3C, 0xAF,
    0xD6, 0x25, 0xE4, 0x8B, 0x38, 0x0A, 0xAC, 0x72, 0x21, 0xD4, 0xF8, 0x07
])

def main(inp: str, outp: str) -> None:
    with open(inp, 'rb') as f:
        payload = f.read()

    # 256KB ROM
    rom = bytearray(256 * 1024)

    # Entry: branch to 0xC0
    rom[0x00:0x04] = struct.pack('<I', 0xEA00002E)
    # Nintendo logo
    rom[0x04:0x04+len(NINTENDO_LOGO)] = NINTENDO_LOGO
    # Title / codes
    title = b"RUST DEMO    "[:12]
    rom[0xA0:0xAC] = title
    rom[0xAC:0xB0] = b"RUST"
    rom[0xB0:0xB2] = b"01"
    rom[0xB2] = 0x96
    rom[0xB3] = 0x00
    rom[0xB4] = 0x00
    # Checksum
    chk = 0
    for i in range(0xA0, 0xBD):
        chk = (chk - rom[i]) & 0xFF
    rom[0xBD] = (chk - 0x19) & 0xFF

    # Copy code at 0xC0
    code_off = 0xC0
    end_off = code_off + len(payload)
    if end_off > len(rom):
        raise SystemExit("payload too large for ROM")
    rom[code_off:end_off] = payload

    # Fill rest with infinite loop (b .)
    for i in range(end_off, len(rom), 4):
        rom[i:i+4] = struct.pack('<I', 0xEAFFFFFE)

    with open(outp, 'wb') as f:
        f.write(rom)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Usage: pack_rust_gba.py <input.bin> <output.gba>")
        sys.exit(1)
    main(sys.argv[1], sys.argv[2])
