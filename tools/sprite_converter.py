#!/usr/bin/env python3
import os
from PIL import Image, ImageDraw
from typing import List, Tuple

ASSETS_DIR = os.path.join(os.path.dirname(__file__), "..", "assets")
OUT_DIR = os.path.join(os.path.dirname(__file__), "..", "rust", "src", "assets")

os.makedirs(ASSETS_DIR, exist_ok=True)
os.makedirs(OUT_DIR, exist_ok=True)


def ensure_placeholder_png(path: str, kind: str, size: Tuple[int, int] = (16, 16)) -> None:
	if os.path.exists(path):
		return
	img = Image.new("RGBA", size, (0, 0, 0, 0))
	d = ImageDraw.Draw(img)
	w, h = size
	if kind == "player":
		# cyan circle
		d.ellipse((2, 2, w-3, h-3), fill=(0, 255, 255, 255))
		# white highlight
		d.ellipse((5, 5, w-8, h-8), fill=(255, 255, 255, 255))
	else:
		# magenta diamond
		cx, cy = w//2, h//2
		d.polygon([(cx, 1), (w-2, cy), (cx, h-2), (2, cy)], fill=(255, 0, 255, 255))
	img.save(path)


def rgb_to_bgr555(r: int, g: int, b: int) -> int:
	return ((b>>3) << 10) | ((g>>3) << 5) | (r>>3)


def quantize_to_15_colors(img: Image.Image) -> Tuple[List[int], List[int]]:
	# Build palette starting with transparent index 0
	palette: List[int] = [0] * 16
	colors: List[Tuple[int,int,int,int]] = [(0,0,0,0)]
	pix = img.convert("RGBA")
	w, h = pix.size
	indices: List[int] = []
	for y in range(h):
		for x in range(w):
			r, g, b, a = pix.getpixel((x, y))
			if a < 128:
				indices.append(0)
				continue
			col = (r, g, b, 255)
			try:
				idx = colors.index(col)
			except ValueError:
				if len(colors) >= 16:
					# clamp to last color
					idx = 15
				else:
					colors.append(col)
					idx = len(colors) - 1
			indices.append(idx)
	# Build BGR555 palette
	for i, (r,g,b,a) in enumerate(colors):
		if i == 0:
			palette[0] = 0
		else:
			palette[i] = rgb_to_bgr555(r,g,b)
	# pad remaining
	for i in range(len(colors), 16):
		palette[i] = 0
	return palette, indices


def indices_to_4bpp_tiles(indices: List[int], w: int, h: int) -> bytes:
	# Expect w,h multiples of 8
	tiles = bytearray()
	for ty in range(0, h, 8):
		for tx in range(0, w, 8):
			for row in range(8):
				for col in range(0, 8, 2):
					p0 = indices[(ty+row)*w + (tx+col)] & 0xF
					p1 = indices[(ty+row)*w + (tx+col+1)] & 0xF
					tiles.append((p1<<4) | p0)
	return bytes(tiles)


def convert_png_to_rs(png_path: str, rs_out: str, module_name: str) -> None:
	img = Image.open(png_path)
	w, h = img.size
	if w % 8 != 0 or h % 8 != 0:
		raise SystemExit(f"Sprite {png_path} must be multiple of 8 pixels")
	palette, idx = quantize_to_15_colors(img)
	tiles = indices_to_4bpp_tiles(idx, w, h)
	with open(rs_out, "w") as f:
		f.write("// Auto-generated by tools/sprite_converter.py\n")
		f.write(f"pub const WIDTH: usize = {w};\n")
		f.write(f"pub const HEIGHT: usize = {h};\n")
		f.write("pub const PALETTE_4BPP: [u16; 16] = [\n")
		for i, p in enumerate(palette):
			f.write(f"\t0x{p:04X},")
			if (i % 8) == 7: f.write("\n")
		f.write("];\n")
		f.write(f"pub const TILES_4BPP: [u8; {len(tiles)}] = [\n")
		for i in range(0, len(tiles), 16):
			chunk = tiles[i:i+16]
			f.write("\t" + ",".join(f"0x{b:02X}" for b in chunk) + ",\n")
		f.write("];\n")


def main():
	player_png = os.path.join(ASSETS_DIR, "player.png")
	enemy_png = os.path.join(ASSETS_DIR, "enemy.png")
	ensure_placeholder_png(player_png, "player")
	ensure_placeholder_png(enemy_png, "enemy")
	convert_png_to_rs(player_png, os.path.join(OUT_DIR, "player_sprite.rs"), "player_sprite")
	convert_png_to_rs(enemy_png, os.path.join(OUT_DIR, "enemy_sprite.rs"), "enemy_sprite")
	with open(os.path.join(OUT_DIR, "mod.rs"), "w") as f:
		f.write("pub mod player_sprite;\n")
		f.write("pub mod enemy_sprite;\n")

if __name__ == "__main__":
	main()
